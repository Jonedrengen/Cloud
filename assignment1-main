import httpx
import xmltodict
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput

def get_enabled_events(graph_id: str, sim_id: str, auth: (str, str)):
    pass
def create_buttons_of_enabled_events(graph_id: str, sim_id: str, auth: (str, str), button_layout: BoxLayout):
    pass
# source code provided in exercise sheet
class SimulationButton(Button):
    def __init__(self, event_id: int, graph_id: str, simulation_id: str, username: str, password: str, text: str):
        Button.__init__(self)
        self.event_id = event_id
        self.text = text
        self.graph_id = graph_id
        self.simulation_id = simulation_id
        self.username = username
        self.password = password
        self.manipulate_box_layout: BoxLayout = BoxLayout()
        self.bind(on_press=self.execute_event)
    def execute_event(self, instance):
        pass

class MyApp(App):
    #creating the constructor (to initiate the attributes, like labels, buttons and layout)
    def __init__(self):
        # calling the contructor of the parent class App, to ensure attributes are initialized correctly (not always necessary, but always recommended)
        App.__init__(self)
        self.Button_start = Button(text="Start the instance")
       
        #creating empty spaces
        self.empty1 = Label(text='') #to simulate empty space
        self.empty2 = Label(text='') #to simulate empty space
        self.empty3 = Label(text='') #to simulate empty space
        self.empty4 = Label(text='') #to simulate empty space
        self.empty5 = Label(text='') #to simulate empty space
        self.empty6 = Label(text='') #to simulate empty space
        self.empty7 = Label(text='') #to simulate empty space


        #creating label for username
        self.Label_username = Label(text='Username:')
        self.txtinput_username = TextInput(text='enter username:')

        #creating label for password
        self.Label_password = Label(text='Password:')
        self.txtinput_password = TextInput(text='enter password:')

        #creating label and txtinput for graph specification
        self.Label_graphID = Label(text='Graph ID:')
        self.txtinput_graphID = TextInput(text='enter graph id:')
        
    #creating the builder (to create the structure of the app)
    def build(self):
        #creating layout foundation
        layout_main = BoxLayout(orientation="vertical", padding='1pt', spacing=0)
        layout_username = BoxLayout(orientation="horizontal", padding='1pt', spacing=0)
        layout_password = BoxLayout(orientation="horizontal", padding='1pt', spacing=0)
        layout_graph = BoxLayout(orientation='horizontal', padding='1pt', spacing=0)
        layout_instance_start = BoxLayout(orientation='horizontal', padding='1pt', spacing=0)
        #this layout is to make the "start instance" button as large as username, password and graph id
        layout_split = BoxLayout(orientation='vertical', padding='1pt', spacing=0) 

        # adding Username label and text input
        layout_username.add_widget(self.Label_username) 
        layout_username.add_widget(self.txtinput_username)
        layout_username.add_widget(self.empty1)
        layout_username.add_widget(self.empty2)
        layout_split.add_widget(layout_username)

        # adding password and text input
        layout_password.add_widget(self.Label_password)
        layout_password.add_widget(self.txtinput_password)
        layout_password.add_widget(self.empty3)
        layout_password.add_widget(self.empty4)
        layout_split.add_widget(layout_password)
        
        #adding the graphID specification
        layout_graph.add_widget(self.Label_graphID)
        layout_graph.add_widget(self.txtinput_graphID)
        layout_graph.add_widget(self.empty5)
        layout_graph.add_widget(self.empty6)
        layout_split.add_widget(layout_graph)
        
        #adding "start instance" button
        layout_instance_start.add_widget(self.Button_start)
        layout_instance_start.add_widget(self.empty7)
        layout_main.add_widget(layout_split)
        layout_main.add_widget(layout_instance_start)
        return layout_main
    def start_sim(self, instance):
        pass


if __name__ == '__main__':
    mainApp = MyApp()
    MyApp().run()
